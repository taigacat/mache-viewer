AWSTemplateFormatVersion: "2010-09-09"
Description: "Stateful stack"

Parameters:
  ServiceName:
    Type: String
    Description: Service name
    Default: mache-viewer
  Phase:
    Type: String
    Description: Phase
    AllowedValues:
      - ci
      - dev
      - prd
  S3KeyOpenApi:
    Type: String
    Description: S3 key OpenAPI specification
  S3KeyCode:
    Type: String
    Description: S3 key code artifact

Resources:
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Sub ${ServiceName}-cmn-web
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:s3:::${ServiceName}-cmn-web/*
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}
          - Action: s3:ListBucket
            Effect: Allow
            Resource: !Sub arn:${AWS::Partition}:s3:::${ServiceName}-cmn-web
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        PriceClass: PriceClass_100
        DefaultRootObject: index.html
        Origins:
          - Id: S3BucketWeb
            DomainName: !Sub ${ServiceName}-cmn-web.s3.amazonaws.com
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !GetAtt OriginAccessControl.Id
          - Id: APIGateway
            DomainName: !Sub '${APIGateway}.execute-api.${AWS::Region}.${AWS::URLSuffix}'
            CustomOriginConfig:
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
            OriginPath: /api
        DefaultCacheBehavior:
          TargetOriginId: S3BucketWeb
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: 'none'
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: acba4595-bd28-49b8-b9fe-13317c0390fa # UserAgentRefererHeaders
          Compress: true
        CacheBehaviors:
          - PathPattern: "/api/*"
            TargetOriginId: APIGateway
            OriginRequestPolicyId: acba4595-bd28-49b8-b9fe-13317c0390fa # UserAgentRefererHeaders
            CachePolicyId: !Ref CloudFrontCachePolicyAPI
            ViewerProtocolPolicy: "redirect-to-https"
      Tags:
        - Key: Service
          Value: !Sub ${ServiceName}
        - Key: Phase
          Value: !Ref Phase

  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Description: !Sub 'OAC of ${ServiceName}-cmn-web. Created by ${AWS::StackName}'
        Name: !Sub ${ServiceName}-cmn-web-OAC
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontCachePolicyAPI:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: "StatefulCachePolicy"
        DefaultTTL: 3600
        MaxTTL: 86300
        MinTTL: 60
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: all

  DynamoDbObjectTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ServiceName}-${Phase}-object-table
      AttributeDefinitions:
        - AttributeName: hashKey
          AttributeType: S
        - AttributeName: rangeKey
          AttributeType: S
      KeySchema:
        - AttributeName: hashKey
          KeyType: HASH
        - AttributeName: rangeKey
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Service
          Value: !Sub ${ServiceName}
        - Key: Phase
          Value: !Ref Phase

  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${ServiceName}-${Phase}-api
      EndpointConfiguration:
        Types:
          - REGIONAL
      BodyS3Location:
        Bucket: !Sub ${ServiceName}-cmd-mdl
        Key: !Ref S3KeyOpenApi
      Tags:
        - Key: Service
          Value: !Sub ${ServiceName}
        - Key: Phase
          Value: !Ref Phase

  APIGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref APIGateway
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: api

  APIGatewayDeploymentV1:
    Type: AWS::ApiGateway::Deployment
    DependsOn: APIGatewayResource
    Properties:
      RestApiId: !Ref APIGateway
      StageName: v1

  APIGatewayStage:
    Type: AWS::ApiGateway::Stage
    DependsOn: APIGatewayDeploymentV1
    Properties:
      StageName: !Ref Phase
      RestApiId: !Ref APIGateway
      DeploymentId: !Ref APIGatewayDeploymentV1
      Tags:
        - Key: Service
          Value: !Sub ${ServiceName}
        - Key: Phase
          Value: !Ref Phase

  APIFunctionV1:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ServiceName}-${Phase}-api
      Runtime: nodejs18.x
      Code:
        S3Bucket: !Sub ${ServiceName}-cmd-mdl
        S3Key: !Ref S3KeyCode
      Handler: app.handler
      Environment:
        Variables:
          OBJECT_TABLE: !Ref DynamoDbObjectTable
      Architectures:
        - arm64
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt APIFunctionRole.Arn
      Tags:
        - Key: Service
          Value: !Sub ${ServiceName}
        - Key: Phase
          Value: !Ref Phase

  APIFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      RoleName: !Sub ${ServiceName}-${Phase}-lambda
      Policies:
        - PolicyName: !Sub ${ServiceName}-${Phase}-logs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ServiceName}-${Phase}-*:*
        - PolicyName: !Sub ${ServiceName}-${Phase}-dynamodb
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource: !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ServiceName}-${Phase}-*
      Tags:
        - Key: Service
          Value: !Sub ${ServiceName}
        - Key: Phase
          Value: !Ref Phase

Outputs:
    CloudFrontDistribution:
        Description: CloudFront distribution
        Value: !Ref CloudFrontDistribution
    DynamoDbObjectTable:
        Description: DynamoDB object table
        Value: !Ref DynamoDbObjectTable
    APIGateway:
        Description: API Gateway
        Value: !Ref APIGateway
    APIFunctionV1:
        Description: API Lambda function
        Value: !Ref APIFunctionV1
