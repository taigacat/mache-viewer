name: Deploy

on:
  workflow_call:
    inputs:
      region:
        type: string
        description: Region
        required: false
        default: ap-northeast-1
      phase:
        type: string
        description: Phase
        required: true
        default: ci
      build_version:
        type: string
        description: Build version (yyyyMMddHHmmss)
        required: true

env:
  ServiceName: mache-viewer

jobs:
  update-dynamodb:
    runs-on: ubuntu-latest
    outputs:
      DynamoDbObjectTable: ${{ steps.dynamodb-stack.outputs.DynamoDbObjectTable }}
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{secrets.AWS_DEPLOY_ROLE_ARN}}
          aws-region: ${{inputs.region}}

      ### DynamoDB ###
      - name: Deploy cloudformation stack [dynamodb]
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{env.ServiceName}}-${{inputs.phase}}-dynamodb
          template: infra/cfn/dynamodb/dynamodb.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: |
            ServiceName=${{ env.ServiceName }},
            Phase=${{ inputs.phase }}
      - id: dynamodb-stack
        run: |
          aws cloudformation describe-stacks \
            --stack-name ${{env.ServiceName}}-${{inputs.phase}}-dynamodb \
            | jq -r '.Stacks[] | .Outputs[] | [.OutputKey,.OutputValue] | join("=")' \
            >> $GITHUB_OUTPUT

  update-blue:
    runs-on: ubuntu-latest
    needs:
      - update-dynamodb
    outputs:
      APIFunction: ${{ steps.lambda-function-stack.outputs.APIFunction }}
      APIFunctionVersion: ${{ steps.lambda-version-stack.outputs.APIFunctionVersion }}
      APIGatewayId: ${{ steps.apigw-stack.outputs.APIGatewayId }}
      APIGatewayDeploymentId: ${{ steps.apigw-deployment-stack.outputs.APIGatewayDeploymentId }}
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{secrets.AWS_DEPLOY_ROLE_ARN}}
          aws-region: ${{inputs.region}}

      ### Lambda Function ###
      - name: Deploy cloudformation stack [lambda function]
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{env.ServiceName}}-${{inputs.phase}}-lambda
          template: infra/cfn/lambda/lambda-function.yaml
          no-fail-on-empty-changeset: "1"
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: |
            ServiceName=${{ env.ServiceName }},
            Phase=${{ inputs.phase }},
            S3KeyCode=build/${{inputs.build_version}}/backend/function.zip
      - id: lambda-function-stack
        run: |
          aws cloudformation describe-stacks \
            --stack-name ${{env.ServiceName}}-${{inputs.phase}}-lambda \
            | jq -r '.Stacks[] | .Outputs[] | [.OutputKey,.OutputValue] | join("=")' \
            >> $GITHUB_OUTPUT

      ### Lambda Version ###
      - name: Deploy cloudformation stack [lambda version]
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{env.ServiceName}}-${{inputs.phase}}-lambda-version-${{ inputs.build_version }}
          template: infra/cfn/lambda/lambda-version.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: |
            APIFunction=${{ steps.lambda-function-stack.outputs.APIFunction }}
      - id: lambda-version-stack
        run: |
          aws cloudformation describe-stacks \
            --stack-name ${{ env.ServiceName }}-${{ inputs.phase }}-lambda-version-${{ inputs.build_version }} \
            | jq -r '.Stacks[] | .Outputs[] | [.OutputKey,.OutputValue] | join("=")' \
            >> $GITHUB_OUTPUT

      ### Lambda Alias (Blue) ###
      - name: Deploy cloudformation stack [lambda alias blue]
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{env.ServiceName}}-${{inputs.phase}}-lambda-alias-blue
          template: infra/cfn/lambda/lambda-alias.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: |
            AliasName=blue,
            APIFunction=${{ steps.lambda-function-stack.outputs.APIFunction }},
            APIFunctionVersion=${{ steps.lambda-version-stack.outputs.APIFunctionVersion }}
      - id: lambda-alias-blue-stack
        run: |
          aws cloudformation describe-stacks \
            --stack-name ${{ env.ServiceName }}-${{ inputs.phase }}-lambda-alias-blue \
            | jq -r '.Stacks[] | .Outputs[] | [.OutputKey,.OutputValue] | join("=")' \
            >> $GITHUB_OUTPUT

      ### API Gateway ###
      - name: Uplaod OpenAPI Specification
        run: |
          aws s3 cp infra/swagger.yaml \
            s3://${{ env.ServiceName }}-cmn-mdl/build/${{ inputs.build_version }}/infra/swagger.yaml
      - name: Deploy cloudformation stack [apigateway]
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ env.ServiceName }}-${{ inputs.phase }}-apigw
          template: infra/cfn/apigateway/apigateway.yaml
          no-fail-on-empty-changeset: "1"
          capabilities: CAPABILITY_AUTO_EXPAND
          parameter-overrides: |
            ServiceName=${{ env.ServiceName }},
            Phase=${{ inputs.phase }},
            S3KeyOpenApi=build/${{ inputs.build_version }}/infra/swagger.yaml
      - id: apigw-stack
        run: |
          aws cloudformation describe-stacks \
            --stack-name ${{ env.ServiceName }}-${{ inputs.phase }}-apigw \
            | jq -r '.Stacks[] | .Outputs[] | [.OutputKey,.OutputValue] | join("=")' \
            >> $GITHUB_OUTPUT

      ### API Gateway Deployment ###
      - name: Deploy cloudformation stack [apigateway deployment]
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ env.ServiceName }}-${{ inputs.phase }}-apigw-deployment-${{ inputs.build_version }}
          template: infra/cfn/apigateway/apigateway-deployment.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: |
            APIGatewayId=${{ steps.apigw-stack.outputs.APIGatewayId }}
      - id: apigw-deployment-stack
        run: |
          aws cloudformation describe-stacks \
            --stack-name ${{ env.ServiceName }}-${{ inputs.phase }}-apigw-deployment-${{ inputs.build_version }} \
            | jq -r '.Stacks[] | .Outputs[] | [.OutputKey,.OutputValue] | join("=")' \
            >> $GITHUB_OUTPUT

      ### API Gateway Stage (blue) ###
      - name: Deploy cloudformation stack [apigateway stage blue]
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{env.ServiceName}}-${{inputs.phase}}-apigw-stage-blue
          template: infra/cfn/apigateway/apigateway-stage.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: |
            ServiceName=${{ env.ServiceName }},
            Phase=${{ inputs.phase }},
            StageName=test,
            APIGatewayId=${{ steps.apigw-stack.outputs.APIGatewayId }},
            APIGatewayDeploymentId=${{ steps.apigw-deployment-stack.outputs.APIGatewayDeploymentId }},
            APIFunctionAlias=blue,
            APIFunctionAliasArn=${{ steps.lambda-alias-blue-stack.outputs.APIFunctionAlias }}
      - run: |
          aws cloudformation describe-stacks \
            --stack-name ${{env.ServiceName}}-${{inputs.phase}}-apigw-stage-blue \
            | jq -r '.Stacks[] | .Outputs[] | [.OutputKey,.OutputValue] | join("=")' \
            >> $GITHUB_OUTPUT

  update-green:
    runs-on: ubuntu-latest
    needs:
      - update-blue
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ inputs.region }}
      - name: Deploy cloudformation stack [lambda alias green]
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ env.ServiceName }}-${{ inputs.phase }}-lambda-alias-green
          template: infra/cfn/lambda/lambda-alias.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: |
            AliasName=green,
            APIFunction=${{ needs.update-blue.outputs.APIFunction }},
            APIFunctionVersion=${{ needs.update-blue.outputs.APIFunctionVersion }}
      - id: lambda-alias-green-stack
        run: |
          aws cloudformation describe-stacks \
            --stack-name ${{ env.ServiceName }}-${{ inputs.phase }}-lambda-alias-green \
            | jq -r '.Stacks[] | .Outputs[] | [.OutputKey,.OutputValue] | join("=")' \
            >> $GITHUB_OUTPUT
      - name: Deploy cloudformation stack [apigateway stage green]
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{env.ServiceName}}-${{inputs.phase}}-apigw-stage-green
          template: infra/cfn/apigateway/apigateway-stage.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: |
            ServiceName=${{ env.ServiceName }},
            Phase=${{ inputs.phase }},
            StageName=live,
            APIGatewayId=${{ needs.update-blue.outputs.APIGatewayId }},
            APIGatewayDeploymentId=${{ needs.update-blue.outputs.APIGatewayDeploymentId }},
            APIFunctionAlias=green,
            APIFunctionAliasArn=${{ steps.lambda-alias-green-stack.outputs.APIFunctionAlias }}
      - run: |
          aws cloudformation describe-stacks \
            --stack-name ${{ env.ServiceName }}-${{ inputs.phase }}-apigw-stage-green \
            | jq -r '.Stacks[] | .Outputs[] | [.OutputKey,.OutputValue] | join("=")' \
            >> $GITHUB_OUTPUT

  update-frontend:
    runs-on: ubuntu-latest
    needs:
      - update-green
      - update-blue
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ inputs.region }}
      - name: Copy static files
        run: |
          aws s3 sync s3://${{ env.ServiceName }}-cmn-mdl/build/${{ inputs.build_version }}/frontend/ \
            s3://${{ env.ServiceName }}-cmn-web/${{ inputs.phase }}/web/

  update-cloudfront:
    runs-on: ubuntu-latest
    needs:
      - update-blue
      - update-green
    outputs:
      CloudFrontDistributionId: ${{ steps.cloudfront-stack.outputs.CloudFrontDistributionId }}
      CloudFrontDistributionDomainName: ${{ steps.cloudfront-stack.outputs.CloudFrontDistributionDomainName }}
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ inputs.region }}

      ### Update CloudFront ###
      - name: Deploy cloudformation stack [cloudfront]
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ env.ServiceName }}-${{ inputs.phase }}-cloudfront
          template: infra/cfn/cloudfront/cloudfront.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: |
            ServiceName=${{ env.ServiceName }},
            Phase=${{ inputs.phase }},
            APIGatewayId=${{ needs.update-blue.outputs.APIGatewayId }}
      - id: cloudfront-stack
        run: |
          aws cloudformation describe-stacks \
            --stack-name ${{ env.ServiceName }}-${{ inputs.phase }}-cloudfront \
            | jq -r '.Stacks[] | .Outputs[] | [.OutputKey,.OutputValue] | join("=")' \
            >> $GITHUB_OUTPUT

  delete-old-lambda-version:
    runs-on: ubuntu-latest
    needs:
      - update-green
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ inputs.region }}
      - name: Delete old version out of 5
        run: |
          aws cloudformation list-stacks \
            --stack-status-filter CREATE_COMPLETE \
            --query 'StackSummaries[?starts_with(StackName, `${{ env.ServiceName }}-${{ inputs.phase }}-lambda-version-`) == `true`]' \
          | jq 'sort_by(.StackName) | reverse | map(.StackName) | .[5:] | .[]'  \
          | xargs -I{} aws cloudformation delete-stack --stack-name {}

  delete-old-apigw-deployment:
    runs-on: ubuntu-latest
    needs:
      - update-green
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ inputs.region }}
      - name: Delete old version out of 5
        run: |
          aws cloudformation list-stacks \
            --stack-status-filter CREATE_COMPLETE \
            --query 'StackSummaries[?starts_with(StackName, `${{ env.ServiceName }}-${{ inputs.phase }}-apigw-deployment-`) == `true`]' \
          | jq 'sort_by(.StackName) | reverse | map(.StackName) | .[5:] | .[]'  \
          | xargs -I{} aws cloudformation delete-stack --stack-name {}
